{"version":3,"sources":["webpack:///src/app/msg/outbox/outbox.page.scss","webpack:///src/app/services/app.service.ts","webpack:///src/app/msg/outbox/outbox.module.ts","webpack:///src/app/msg/outbox/outbox-routing.module.ts","webpack:///src/app/msg/outbox/outbox.page.html","webpack:///src/app/msg/outbox/outbox.page.ts"],"names":["AppService","router","alertController","storage","fbStore","title","text","create","header","message","buttons","handler","alert","present","Promise","resolve","reject","get","type","subscribe","next","data","error","console","userId","msgBox","msgId","cssClass","role","collection","doc","update","status","then","navigate","log","providedIn","OutboxPageModule","imports","declarations","routes","path","component","OutboxPageRoutingModule","forChild","exports","OutboxPage","app","isProfile","uData","userData","JSON","parse","pData","userProfile","getAllMessages","uid","ref","orderBy","valueChanges","idField","mData","allMessages","forEach","msgData","from","fromName","name","statusIcon","push","selector","template"],"mappings":"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","file":"msg-outbox-outbox-module-es5.js","sourcesContent":["export default \"ion-grid {\\n  margin-top: 1rem;\\n}\\n\\nion-row ion-col:first-child {\\n  text-align: center;\\n  background: #eee;\\n  color: #333;\\n  padding: 0.2rem;\\n}\\n\\nion-row ion-col.readed:first-child {\\n  background: #888;\\n}\\n\\nion-grid small {\\n  display: block;\\n  margin-top: 0.2rem;\\n}\\n\\nion-row {\\n  margin: 1rem 0;\\n}\\n\\nion-col div {\\n  margin-bottom: 0.5rem;\\n  font-weight: bold;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXNnL291dGJveC9vdXRib3gucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsZUFBQTtBQUNKOztBQUVBO0VBQ0ksZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGNBQUE7RUFDQSxrQkFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtBQUNKOztBQUVBO0VBQ0kscUJBQUE7RUFDQSxpQkFBQTtBQUNKIiwiZmlsZSI6InNyYy9hcHAvbXNnL291dGJveC9vdXRib3gucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWdyaWQge1xyXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcclxufVxyXG5cclxuaW9uLXJvdyBpb24tY29sOmZpcnN0LWNoaWxkIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQ6ICNlZWU7XHJcbiAgICBjb2xvciAgICAgOiAjMzMzO1xyXG4gICAgcGFkZGluZyAgIDogLjJcXHJlbTtcclxufVxyXG5cclxuaW9uLXJvdyBpb24tY29sLnJlYWRlZDpmaXJzdC1jaGlsZCB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjODg4O1xyXG59XHJcblxyXG5pb24tZ3JpZCBzbWFsbCB7XHJcbiAgICBkaXNwbGF5ICAgOiBibG9jaztcclxuICAgIG1hcmdpbi10b3A6IC4ycmVtO1xyXG59XHJcblxyXG5pb24tcm93IHtcclxuICAgIG1hcmdpbjogMXJlbSAwO1xyXG59XHJcblxyXG5pb24tY29sIGRpdiB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0ICA6IGJvbGQ7XHJcbn0iXX0= */\";","/**\r\n * Serviços de uso geral\r\n *    Aqui estão alguns serviços usados em toda ou parte do aplicativo\r\n * @author Por Luferat\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n// 3.1) Importa dependências\r\nimport { Router } from '@angular/router'; // Roteamento\r\nimport { AlertController } from '@ionic/angular'; // Caixa de alerta\r\n\r\n// 4.1) Importa dependências\r\nimport { StorageMap } from '@ngx-pwa/local-storage'; // Armazenamento local\r\n\r\n// 13.1) Importa dependências\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(\r\n\r\n    // 3.2) Injeção das dependências\r\n    public router: Router, // Roteamento\r\n    public alertController: AlertController, // Caixa de alerta\r\n\r\n    // 4.2) Injeção das dependências\r\n    private storage: StorageMap, // Armazenamento local\r\n\r\n    // 13.2) Injeção das dependências\r\n    public fbStore: AngularFirestore,\r\n  ) { }\r\n\r\n  // 3.3) Caixa de alerta para feedback (https://ionicframework.com/docs/api/alert)\r\n  async myAlert(title: string, text: string) {\r\n    const alert = await this.alertController.create({\r\n      header: title,\r\n      message: text,\r\n      buttons: [{\r\n        text: 'Ok',\r\n        handler: () => true\r\n      }]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  // 4.3) Método que detecta a presença do perfil local\r\n  async isProfile() {\r\n\r\n    // Constrói a promise\r\n    return new Promise<any>((resolve, reject) => {\r\n\r\n      // Lê o armazenamento local\r\n      this.storage.get('userProfile', { type: 'string' }).subscribe({\r\n        next: (data) => {\r\n\r\n          // Se perfil, retorna 'true'\r\n          if (data) { resolve(true); }\r\n\r\n          // Se não tem perfil, retorna 'false'\r\n          else { resolve(false); }\r\n        },\r\n\r\n        // Em caso de erro ao tentar acessar 'storage'\r\n        error: (error) => console.error(error)\r\n      });\r\n    });\r\n  }\r\n\r\n  // 13.3) Apaga uma mensagem da caixa de mensagens\r\n  async msgDelete(userId: string, msgBox: string, msgId: string) {\r\n\r\n    // 14.1) Exibe a caixa de alerta e de confirmação\r\n    const alert = await this.alertController.create({\r\n      cssClass: '',\r\n      header: 'Apagar mensagem',\r\n      message: 'Tem certeza que deseja apagar esta mensagem? Este processo é irreversível!',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => false\r\n        }, {\r\n          text: 'Apagar',\r\n          handler: () => {\r\n\r\n            // Localize a caixa correta e apaga a mensagem\r\n            this.fbStore.collection(`messages/${userId}/${msgBox}`).doc(msgId).update({ status: 'Apagada' })\r\n\r\n              // Se a mensagem foi apagada, retorna para a listagem da caixa\r\n              .then(() => { this.router.navigate([`/msg/${msgBox}`]); })\r\n\r\n              // Se deu erro, exibe\r\n              .catch(error => { console.log(error); });\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { OutboxPageRoutingModule } from './outbox-routing.module';\r\nimport { OutboxPage } from './outbox.page';\r\n\r\n// 17.1) Importa dependências\r\nimport { MsgMenuComponent } from '../../components/msg-menu/msg-menu.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    OutboxPageRoutingModule\r\n  ],\r\n  declarations: [\r\n    OutboxPage,\r\n\r\n    // 17.2) Declara dependências\r\n    MsgMenuComponent,\r\n  ]\r\n})\r\nexport class OutboxPageModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { OutboxPage } from './outbox.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: OutboxPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class OutboxPageRoutingModule {}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n\\r\\n    <!-- 10.1) Menu e título -->\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n\\r\\n    <ion-title>Caixa de Saída</ion-title>\\r\\n\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <!-- 21.1) Lista mensagens recebidas -->\\r\\n  <div class=\\\"ion-padding\\\">\\r\\n\\r\\n    <p class=\\\"ion-no-margin\\\">Mensagens enviadas:</p>\\r\\n\\r\\n    <ion-grid class=\\\"allMessages\\\" *ngIf=\\\"allMessages?.length > 0\\\">\\r\\n\\r\\n      <ion-row *ngFor=\\\"let msg of allMessages\\\">\\r\\n        <ion-col size=\\\"1\\\">\\r\\n          <ion-icon name=\\\"{{msg.statusIcon}}\\\"></ion-icon>\\r\\n        </ion-col>\\r\\n        <ion-col>\\r\\n          <div><a routerLink=\\\"/msg/view/outbox/{{ msg.msgId }}\\\">{{ msg.subject }}</a></div>\\r\\n          <small>De <strong>{{ msg.fromName }}</strong></small>\\r\\n          <small>Em <strong>{{ msg.date | date: ['dd/MM/yyyy, HH:mm'] }}.</strong></small>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n\\r\\n    </ion-grid>\\r\\n\\r\\n    <!-- 18.1) Se não exitem mensagens à exibir -->\\r\\n    <p class=\\\"ion-text-center\\\" *ngIf=\\\"allMessages?.length == 0\\\">Nenhuma mensagem...</p>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\\r\\n<!-- 17.1) Menu de mensagens -->\\r\\n<app-msg-menu></app-msg-menu>\";","import { Component, OnInit } from '@angular/core';\r\n\r\n// 10.1) Importa dependências\r\nimport { Router } from '@angular/router';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { AppService } from 'src/app/services/app.service';\r\n\r\n// 21.1) Importa dependências\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-outbox',\r\n  templateUrl: './outbox.page.html',\r\n  styleUrls: ['./outbox.page.scss'],\r\n})\r\nexport class OutboxPage implements OnInit {\r\n\r\n  // 10.3) Armazena dados do usuário\r\n  userData: any;\r\n  userProfile: any;\r\n\r\n  // 21.3) Atributos\r\n  public allMessages: any[any]; // View com todas as mensagens\r\n\r\n  constructor(\r\n\r\n    // 10.2) Injeta dependências\r\n    public router: Router,\r\n    public app: AppService,\r\n    public storage: StorageMap,\r\n\r\n    // 21.2) Injeta dependências\r\n    public fbStore: AngularFirestore,\r\n  ) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  // 10.4) Se tem perfil, obtém dados.\r\n  //       Se não tem, vai para \"novo perfil\"\r\n  ionViewWillEnter() {\r\n\r\n    // Testa o perfil local (true e false)\r\n    this.app.isProfile().then(\r\n      (data) => {\r\n\r\n        // Se existe, faz as ações da página\r\n        if (data) {\r\n\r\n          // Obtém dados do login local e armazena em 'userData'\r\n          this.storage.get('userData', { type: 'string' }).subscribe(\r\n            (uData) => {\r\n              this.userData = JSON.parse(uData);\r\n\r\n              // Obtém dados do perfil local e armazena em 'userProfile'\r\n              this.storage.get('userProfile', { type: 'string' }).subscribe(\r\n                (pData) => {\r\n                  this.userProfile = JSON.parse(pData);\r\n\r\n                  // 21.4) Obtém todas as mensagens para a 'view'\r\n                  this.getAllMessages();\r\n                }\r\n              );\r\n            }\r\n          );\r\n\r\n          // Se não existe perfil, vai para o cadastro de perfil\r\n        } else {\r\n          this.router.navigate(['/user/new']);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  // 21.5) Obtém todas as mensagens para a 'view'\r\n  getAllMessages() {\r\n\r\n    // Lê mesangens do banco de dados com base no Id do usuário logado\r\n    this.fbStore.collection(\r\n      `messages/${this.userData.uid}/outbox`,\r\n      ref => ref.orderBy('date', 'desc')\r\n    ).valueChanges({ idField: 'msgId' }).subscribe(\r\n      (mData) => {\r\n\r\n        // Variável local para as mensagens\r\n        const allMessages = [];\r\n\r\n        // Obtém cada mensagem recebida\r\n        mData.forEach(\r\n          (msgData: any) => {\r\n\r\n            // Não exibe mensagens apagadas\r\n            if (msgData.status !== 'Apagada') {\r\n\r\n              // Obtém o nome de que enviou a mensagem\r\n              this.fbStore.doc<any>(`users/${msgData.from}`).valueChanges().subscribe(\r\n                (data) => {\r\n                  msgData.fromName = data.name;\r\n\r\n                  // Seleciona ícone conforme status da mensagem\r\n                  msgData.statusIcon = 'send-outline';\r\n\r\n                  // Lista mensagem em \"todas as mensagens\"\r\n                  allMessages.push(msgData);\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n\r\n        // Envia mensagens para a view\r\n        this.allMessages = allMessages;\r\n      });\r\n  }\r\n}\r\n"]}