{"version":3,"sources":["webpack:///src/app/pages/contacts/contacts.module.ts","webpack:///src/app/pages/contacts/contacts.page.scss","webpack:///src/app/pages/contacts/contacts.page.ts","webpack:///src/app/pages/contacts/contacts-routing.module.ts","webpack:///src/app/pages/contacts/contacts.page.html"],"names":["ContactsPageModule","imports","declarations","ContactsPage","form","storage","fbStore","alert","pipe","get","type","subscribe","pData","userProfile","JSON","parse","contactForm","controls","uid","setValue","name","email","contactFormCreate","group","date","compose","required","minLength","subject","message","transform","Date","now","trim","collection","add","value","then","contactConfirm","error","console","create","cssClass","header","buttons","text","handler","reset","present","selector","template","routes","path","component","ContactsPageRoutingModule","forChild","exports"],"mappings":"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","file":"pages-contacts-contacts-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { ContactsPageRoutingModule } from './contacts-routing.module';\r\nimport { ContactsPage } from './contacts.page';\r\n\r\n// 22.1) Importando dependências\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ContactsPageRoutingModule,\r\n\r\n    // 22.2) Importando dependências\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [ContactsPage]\r\n})\r\nexport class ContactsPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NvbnRhY3RzL2NvbnRhY3RzLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n// 22.1) Importa dependências\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { StorageMap } from '@ngx-pwa/local-storage';\r\nimport { DatePipe } from '@angular/common';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { AlertController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-contacts',\r\n  templateUrl: './contacts.page.html',\r\n  styleUrls: ['./contacts.page.scss'],\r\n})\r\nexport class ContactsPage implements OnInit {\r\n\r\n  // 22.3) Atributos\r\n  contactForm: FormGroup;\r\n  userProfile: any;\r\n  pipe = new DatePipe('en_US');\r\n\r\n  constructor(\r\n\r\n    // 22.2) Injeta dependências\r\n    public form: FormBuilder,\r\n    public storage: StorageMap,\r\n    public fbStore: AngularFirestore,\r\n    public alert: AlertController\r\n  ) { }\r\n\r\n  // 22.4) Inclua 'void' no 'OnInit'\r\n  ngOnInit(): void {\r\n\r\n    // 22.5) Obtém dados do perfil. Se existir, preenche formulário automaticamente.\r\n    this.storage.get('userProfile', { type: 'string' }).subscribe(\r\n      (pData) => {\r\n        if (pData) {\r\n          this.userProfile = JSON.parse(pData);\r\n          this.contactForm.controls.uid.setValue(this.userProfile.uid);\r\n          this.contactForm.controls.name.setValue(this.userProfile.name);\r\n          this.contactForm.controls.email.setValue(this.userProfile.email);\r\n        }\r\n      }\r\n    );\r\n\r\n    // 22.6) Cria formulário reativo\r\n    this.contactFormCreate();\r\n  }\r\n\r\n  // 22.7) Cria formulário reativo\r\n  contactFormCreate() {\r\n    this.contactForm = this.form.group({\r\n      date: [''],\r\n      uid: [''],\r\n      name: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.minLength(3)\r\n        ])\r\n      ],\r\n      email: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email\r\n        ])\r\n      ],\r\n      subject: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.minLength(5)\r\n        ])\r\n      ],\r\n      message: [\r\n        '',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.minLength(5)\r\n        ])\r\n      ]\r\n    });\r\n  }\r\n\r\n  // 22.8) Processa envio do contato\r\n  contactSend() {\r\n\r\n    // Formata documento\r\n    this.contactForm.controls.date.setValue(this.pipe.transform(Date.now(), 'yyyy-MM-dd hh:mm:ss').trim());\r\n\r\n    // Salva documento no Firestore\r\n    this.fbStore.collection('contacts').add(this.contactForm.value).then(() => {\r\n\r\n      // Exibe feedback\r\n      this.contactConfirm();\r\n\r\n      // Em caso de erro, gera log\r\n    }).catch((error) => { console.error(error); });\r\n  }\r\n\r\n  // 22.9) Exibe feedback\r\n  async contactConfirm() {\r\n    const alert = await this.alert.create({\r\n      cssClass: 'my-custom-class',\r\n      header: 'Contato Enviado',\r\n      message: 'Seu contato foi enviado com sucesso!<br><br>Obrigado...',\r\n      buttons: [{\r\n        text: 'Ok',\r\n        handler: () => {\r\n\r\n          // Reinicia formulário\r\n          this.contactForm.reset({\r\n            uid: this.contactForm.value.uid.trim(),\r\n            name: this.contactForm.value.name.trim(),\r\n            email: this.contactForm.value.email.trim(),\r\n            subject: '',\r\n            message: ''\r\n          });\r\n        }\r\n      }]\r\n    });\r\n    await alert.present();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ContactsPage } from './contacts.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ContactsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ContactsPageRoutingModule {}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n\\r\\n    <ion-title>Faça Contato</ion-title>\\r\\n\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <div class=\\\"ion-padding\\\">\\r\\n\\r\\n    <p class=\\\"ion-no-margin\\\">Preencha o formulário abaixo para entrar em contato com a equipe do aplicativo.</p>\\r\\n\\r\\n    <p class=\\\"ion-text-center\\\"><small>\\r\\n        <ion-text color=\\\"danger\\\">Preencha todos os campos.</ion-text>\\r\\n      </small></p>\\r\\n\\r\\n    <form [formGroup]=\\\"contactForm\\\" (ngSubmit)=\\\"contactSend()\\\">\\r\\n      <ion-input type=\\\"hidden\\\" id=\\\"uid\\\" name=\\\"uid\\\" formControlName=\\\"uid\\\"></ion-input>\\r\\n\\r\\n      <ion-list lines=\\\"full\\\" class=\\\"ion-no-padding\\\">\\r\\n\\r\\n        <ion-item>\\r\\n          <ion-label for=\\\"name\\\" position=\\\"floating\\\" color=\\\"primary\\\">\\r\\n            Seu nome:\\r\\n            <ion-text color=\\\"danger\\\" *ngIf=\\\"contactForm.controls.name.errors\\\">\\r\\n              <small *ngIf=\\\"contactForm.controls.name.errors.required\\\">* Obrigatório</small>\\r\\n              <small *ngIf=\\\"contactForm.controls.name.errors.minlength\\\">* Inválido</small>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n          <ion-input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" formControlName=\\\"name\\\" placeholder=\\\"Seu nome completo\\\">\\r\\n          </ion-input>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item>\\r\\n          <ion-label for=\\\"email\\\" position=\\\"floating\\\" color=\\\"primary\\\">\\r\\n            E-mail:\\r\\n            <ion-text color=\\\"danger\\\" *ngIf=\\\"contactForm.controls.email.errors\\\">\\r\\n              <small *ngIf=\\\"contactForm.controls.email.errors.required\\\">* Obrigatório</small>\\r\\n              <small *ngIf=\\\"contactForm.controls.email.errors.email\\\">* Inválido</small>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n          <ion-input type=\\\"text\\\" id=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Seu e-mail principal\\\">\\r\\n          </ion-input>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item>\\r\\n          <ion-label for=\\\"subject\\\" position=\\\"floating\\\" color=\\\"primary\\\">\\r\\n            Assunto:\\r\\n            <ion-text color=\\\"danger\\\" *ngIf=\\\"contactForm.controls.subject.errors\\\">\\r\\n              <small *ngIf=\\\"contactForm.controls.subject.errors.required\\\">* Obrigatório</small>\\r\\n              <small *ngIf=\\\"contactForm.controls.subject.errors.minlength\\\">* Inválido</small>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n          <ion-input type=\\\"text\\\" id=\\\"subject\\\" name=\\\"subject\\\" formControlName=\\\"subject\\\" placeholder=\\\"Assunto do contato\\\">\\r\\n          </ion-input>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item>\\r\\n          <ion-label for=\\\"message\\\" position=\\\"floating\\\" color=\\\"primary\\\">\\r\\n            Mensagem:\\r\\n            <ion-text color=\\\"danger\\\" *ngIf=\\\"contactForm.controls.message.errors\\\">\\r\\n              <small *ngIf=\\\"contactForm.controls.message.errors.required\\\">* Obrigatório</small>\\r\\n              <small *ngIf=\\\"contactForm.controls.message.errors.minlength\\\">* Inválido</small>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n          <ion-textarea rows=\\\"1\\\" type=\\\"text\\\" id=\\\"message\\\" name=\\\"message\\\" formControlName=\\\"message\\\"\\r\\n            placeholder=\\\"Texto do contato\\\" autoGrow=\\\"true\\\"></ion-textarea>\\r\\n        </ion-item>\\r\\n\\r\\n      </ion-list>\\r\\n\\r\\n      <ion-button type=\\\"submit\\\" expand=\\\"block\\\" class=\\\"ion-margin-vertical\\\" [disabled]=\\\"contactForm.invalid\\\">\\r\\n        Enviar\\r\\n      </ion-button>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\";"]}